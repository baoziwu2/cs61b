# encoding: utf-8
# module onnxruntime.capi.onnxruntime_pybind11_state
# from C:\Users\baozi\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\LocalCache\local-packages\Python313\site-packages\onnxruntime\capi\onnxruntime_pybind11_state.pyd
# by generator 1.147
""" pybind11 stateful interface to ONNX runtime """

# imports
import onnxruntime.capi.onnxruntime_pybind11_state.schemadef as schemadef # <module 'onnxruntime.capi.onnxruntime_pybind11_state.schemadef'>
import onnxruntime.capi.onnxruntime_pybind11_state.opkernel as opkernel # <module 'onnxruntime.capi.onnxruntime_pybind11_state.opkernel'>
import pybind11_builtins as __pybind11_builtins


class RunOptions(__pybind11_builtins.pybind11_object):
    """ Configuration information for a single Run. """
    def add_active_adapter(self, arg0, *args, **kwargs): # real signature unknown; NOTE: unreliably restored from __doc__ 
        """
        add_active_adapter(self: onnxruntime.capi.onnxruntime_pybind11_state.RunOptions, arg0: onnxruntime::lora::LoraAdapter) -> None
        
        Adds specified adapter as an active adapter
        """
        pass

    def add_run_config_entry(self, arg0, arg1): # real signature unknown; restored from __doc__
        """
        add_run_config_entry(self: onnxruntime.capi.onnxruntime_pybind11_state.RunOptions, arg0: str, arg1: str) -> None
        
        Set a single run configuration entry as a pair of strings.
        """
        pass

    def get_run_config_entry(self, arg0): # real signature unknown; restored from __doc__
        """
        get_run_config_entry(self: onnxruntime.capi.onnxruntime_pybind11_state.RunOptions, arg0: str) -> str
        
        Get a single run configuration value using the given configuration key.
        """
        return ""

    def _pybind11_conduit_v1_(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self): # real signature unknown; restored from __doc__
        """ __init__(self: onnxruntime.capi.onnxruntime_pybind11_state.RunOptions) -> None """
        pass

    logid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """To identify logs generated by a particular Run() invocation."""

    log_severity_level = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Log severity level for a particular Run() invocation. 0:Verbose, 1:Info, 2:Warning. 3:Error, 4:Fatal. Default is 2."""

    log_verbosity_level = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """VLOG level if DEBUG build and run_log_severity_level is 0.
Applies to a particular Run() invocation. Default is 0."""

    only_execute_path_to_fetches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Only execute the nodes needed by fetch list"""

    terminate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set to True to terminate any currently executing calls that are using this
RunOptions instance. The individual calls will exit gracefully and return an error status."""



